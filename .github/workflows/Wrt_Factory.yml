#
# Copyright (c) 2021 isSuperman
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/isSuperman/WrtFactory
# Description: Build Wrt Firmware using GitHub Actions
#

name: Wrt Factory

on:
  repository_dispatch:
  workflow_dispatch:
  
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  SPEND_TIME: spend_time_formate.sh
  COMMIT_INFO: commit_formate.sh
  ETA: ETA_formate.sh
  UPLOAD_RELEASE: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UP_COW: true
  UP_FIO: true
  UP_LIT: true
  UP_VMDK: true
  UP_IMG: true
  UP_ROOTFS: false
  TZ: Asia/Shanghai

jobs:
  build:
    #runs-on: [self-hosted, linux, x64, ql]
    #runs-on: [self-hosted, linux, x64, vm]
    runs-on: ubuntu-20.04

    steps:

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf wget swig rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "START_DATE=$(date +%s)" >> $GITHUB_ENV
        
    - name: Prepare to Compile
      run: |
        dts=$((${{ env.START_DATE }} + 6600))
        dt_day=$(date -d @$dts '+%d')
        dt_hour=$(date -d @$dts '+%H')
        dt_time=$(date -d @$dts '+%H:%M')
        echo "time is ${dt_time}"
        curl -sL git.io/eta_formate_sh > $ETA
        chmod +x $ETA
        ./$ETA $dt_day $dt_hour > dta_desc.log
        echo "$(cat dta_desc.log) $dt_time" > dt_str.log
        echo "DT=$(cat dt_str.log)" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        [ -e openwrt ] && cd openwrt && git pull
        [ ! -e openwrt ] && git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Generate commit info
      id: commitinfo
      run: |
        cd openwrt
        curl -sL git.io/commit_formate_sh > $COMMIT_INFO
        chmod +x $COMMIT_INFO
        ./$COMMIT_INFO immortalwrt lean-lede > com_info.log
        echo "DATE_INFO=$(sed -n '2p' com_info.log)" >> $GITHUB_ENV
        echo "RECENT_DATE=$(sed -n '1p' com_info.log)" >> $GITHUB_ENV
        
    - name: Load custom themes and plugins
      id: argon
      run: |
        cd openwrt/package/lean
        rm -rf luci-theme-argon
        git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git
        [ -e luci-app-argon-config ] && git pull || git clone https://github.com/jerrykuku/luci-app-argon-config.git

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        cd openwrt
        [ `grep -c "helloworld" feeds.conf.default` -eq "0" ] && sed -i '$a src-git helloworld https://github.com/fw876/helloworld.git' feeds.conf.default

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt
        sed -i 's/192.168.1.1/192.168.5.1/g' package/base-files/files/bin/config_generate
        sed -i 's@.*CYXluq4wUazHjmCDBCqXF*@#&@g' package/lean/default-settings/files/zzz-default-settings
        sed -i "s/OpenWrt /$(TZ=UTC-8 date "+%m.%d") @ OpenWrt /g" package/lean/default-settings/files/zzz-default-settings

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        rm -rf ./tmp
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        curl -sSX POST 'https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage' -H 'Content-Type: application/x-www-form-urlencoded' --data-binary $'parse_mode=MarkdownV2&chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&disable_web_page_preview=true&text=*Wrt Update Checker：*\n固件开始编译\.\.\.\n预计${{ env.DT }} 结束🧭' 
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "COME_DATE=$(date +"%m\-%d %H:%M")" >> $GITHUB_ENV
        echo "END_DATE=$(date +%s)"  >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
           
    - name: Cau Spend Time
      id: caculate
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt
        curl -sL git.io/spend_time_formate_sh > $SPEND_TIME
        chmod +x $SPEND_TIME
        ./$SPEND_TIME ${{ env.START_DATE }} ${{ env.END_DATE }} 2>&1 | tee cau_time.log
        echo "SPEND_TIME=$(cat cau_time.log)" >> $GITHUB_ENV
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: firmware_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        
    - name: Upload vmdk
      id: vmdk
      if: steps.organize.outputs.status == 'success' && env.UP_VMDK == 'true' && !cancelled()
      run: |
        [ ! -f transfer ] && curl -fsSL git.io/file-transfer | sh
        
        if test ${{ env.UP_COW }} = 'true';then
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined.vmdk 2>&1 | tee cowtransfer.log
        echo "$(cat cowtransfer.log | grep https | cut -f3 -d" ")" > cow.log
        sed -i 's/\./\\\./g' cow.log
        echo "[Cowtransfer]($(cat cow.log))" >> vmdk_md.log
        
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined-efi.vmdk 2>&1 | tee cowtransfer-efi.log
        echo "$(cat cowtransfer-efi.log | grep https | cut -f3 -d" ")" > cow-efi.log
        sed -i 's/\./\\\./g' cow-efi.log
        echo "[Cowtransfer]($(cat cow-efi.log))" >> vmdk_efi_md.log
        fi
        
        if test ${{ env.UP_FIO }} = 'true';then
        ./transfer fio --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined.vmdk 2>&1 | tee fileio.log
        echo "$(cat fileio.log | grep https | cut -f3 -d" ")" > fio.log
        sed -i 's/\./\\\./g' fio.log
        echo "[Fileio]($(cat fio.log))" >> vmdk_md.log
        
        ./transfer fio --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined-efi.vmdk 2>&1 | tee fileio-efi.log
        echo "$(cat fileio-efi.log | grep https | cut -f3 -d" ")" > fio-efi.log
        sed -i 's/\./\\\./g' fio-efi.log
        echo "[Fileio]($(cat fio-efi.log))" >> vmdk_efi_md.log
        fi
        
        if test ${{ env.UP_LIT }} = 'true';then
        ./transfer lit --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined.vmdk 2>&1 | tee litterbox.log
        echo "$(cat litterbox.log | grep https | cut -f3 -d" ")" > lit.log
        sed -i 's/\./\\\./g' lit.log
        echo "[LitterBox]($(cat lit.log))" >> vmdk_md.log
        
        ./transfer lit --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined-efi.vmdk 2>&1 | tee litterbox-efi.log
        echo "$(cat litterbox-efi.log | grep https | cut -f3 -d" ")" > lit-efi.log
        sed -i 's/\./\\\./g' lit-efi.log
        echo "[LitterBox]($(cat lit-efi.log))" >> vmdk_efi_md.log
        fi
        
    - name: Upload img
      id: img
      if: steps.organize.outputs.status == 'success' && env.UP_IMG == 'true' && !cancelled()
      run: |
        [ ! -f transfer ] && curl -fsSL git.io/file-transfer | sh
        
        if test ${{ env.UP_COW }} = 'true';then
         ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined.img.gz 2>&1 | tee cowtransfer-img.log
        echo "$(cat cowtransfer-img.log | grep https | cut -f3 -d" ")" > cow-img.log
        sed -i 's/\./\\\./g' cow-img.log
        echo "[Cowtransfer]($(cat cow-img.log))" >> img_md.log
        
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined-efi.img.gz 2>&1 | tee cowtransfer-efi-img.log
        echo "$(cat cowtransfer-efi-img.log | grep https | cut -f3 -d" ")" > cow-efi-img.log
        sed -i 's/\./\\\./g' cow-efi-img.log
        echo "[Cowtransfer]($(cat cow-efi-img.log))" >> img_efi_md.log
        fi
        
        if test ${{ env.UP_FIO }} = 'true';then
        ./transfer fio --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined.img.gz 2>&1 | tee fileio-img.log
        echo "$(cat fileio-img.log | grep https | cut -f3 -d" ")" > fio-img.log
        sed -i 's/\./\\\./g' fio-img.log
        echo "[Fileio]($(cat fio-img.log))" >> img_md.log
        
        ./transfer fio --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined-efi.img.gz 2>&1 | tee fileio-efi-img.log
        echo "$(cat fileio-efi-img.log | grep https | cut -f3 -d" ")" > fio-efi-img.log
        sed -i 's/\./\\\./g' fio-efi-img.log
        echo "[Fileio]($(cat fio-efi-img.log))" >> img_efi_md.log
        fi
        
        if test ${{ env.UP_LIT }} = 'true';then
        ./transfer lit --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined.img.gz 2>&1 | tee litterbox-img.log
        echo "$(cat litterbox-img.log | grep https | cut -f3 -d" ")" > lit-img.log
        sed -i 's/\./\\\./g' lit-img.log
        echo "[LitterBox]($(cat lit-img.log))" >> img_md.log
        
        ./transfer lit --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-combined-efi.img.gz 2>&1 | tee litterbox-efi-img.log
        echo "$(cat litterbox-efi-img.log | grep https | cut -f3 -d" ")" > lit-efi-img.log
        sed -i 's/\./\\\./g' lit-efi-img.log
        echo "[LitterBox]($(cat lit-efi-img.log))" >> img_efi_md.log
        fi
        
    - name: Upload rootfs
      id: rootfs
      if: steps.organize.outputs.status == 'success' && env.UP_ROOTFS == 'true' && !cancelled()
      run: |
        [ ! -f transfer ] && curl -fsSL git.io/file-transfer | sh
        
        if test ${{ env.UP_COW }} = 'true';then
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE}/openwrt-x86-64-generic-rootfs.tar.gz 2>&1 | tee cowtransfer-rootfs.log
        echo "$(cat cowtransfer-rootfs.log | grep https | cut -f3 -d" ")" > cow-rootfs.log
        sed -i 's/\./\\\./g' cow-rootfs.log
        echo "[Cowtransfer]($(cat cow-rootfs.log))" >> rootfs_md.log
        
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-rootfs.img.gz 2>&1 | tee cowtransfer-img-rootfs.log
        echo "$(cat cowtransfer-img-rootfs.log | grep https | cut -f3 -d" ")" > cow-img-rootfs.log
        sed -i 's/\./\\\./g' cow-img-rootfs.log
        echo "[Cowtransfer]($(cat cow-img-rootfs.log))" >> rootfs_img_md.log
        fi
        
        if test ${{ env.UP_FIO }} = 'true';then
        ./transfer fio --no-progress ${FIRMWARE}/openwrt-x86-64-generic-rootfs.tar.gz 2>&1 | tee fileio-rootfs.log
        echo "$(cat fileio-rootfs.log | grep https | cut -f3 -d" ")" > fio-rootfs.log
        sed -i 's/\./\\\./g' fio-rootfs.log
        echo "[Fileio]($(cat fio-rootfs.log))" >> rootfs_md.log
        
        ./transfer fio --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-rootfs.img.gz 2>&1 | tee fileio-rootfs-img.log
        echo "$(cat fileio-rootfs-img.log | grep https | cut -f3 -d" ")" > fio-rootfs-img.log
        sed -i 's/\./\\\./g' fio-rootfs-img.log
        echo "[Fileio]($(cat fio-rootfs-img.log))" >> rootfs_img_md.log
        fi
        
        if test ${{ env.UP_LIT }} = 'true';then
        ./transfer lit --no-progress ${FIRMWARE}/openwrt-x86-64-generic-rootfs.tar.gz 2>&1 | tee litterbox-rootfs.log
        echo "$(cat litterbox-rootfs.log | grep https | cut -f3 -d" ")" > lit-rootfs.log
        sed -i 's/\./\\\./g' lit-rootfs.log
        echo "[LitterBox]($(cat lit-rootfs.log))" >> rootfs_md.log
        
        ./transfer lit --no-progress ${FIRMWARE}/openwrt-x86-64-generic-squashfs-rootfs.img.gz 2>&1 | tee litterbox-rootfs-img.log
        echo "$(cat litterbox-rootfs-img.log | grep https | cut -f3 -d" ")" > lit-rootfs-img.log
        sed -i 's/\./\\\./g' lit-rootfs-img.log
        echo "[LitterBox]($(cat lit-rootfs-img.log))" >> rootfs_img_md.log
        fi

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Orgnize down list
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        firms="vmdk vmdk_efi img img_efi rootfs rootfs_img"
        for firm in $firms; do
            if test -f ${firm}_md.log; then
          	    sed -i ':a;N;$!ba;s/\n/  /g' ${firm}_md.log
          	    sed -i "s/^/🗂 ${firm}\n/g" ${firm}_md.log
          	    sed -i 's/_/-/g' ${firm}_md.log
                while read line || [ -n "$line" ]; do
                    echo "\n${line}" >> down_list.log
                done < "./${firm}_md.log"
          	fi
        done
        sed -i 's/\-/\\-/g' down_list.log
        sed -i 's/\./\\./g' down_list.log
        sed -i 's/\_/\\_/g' down_list.log
        sed -i ':a;N;$!ba;s/\n//g' down_list.log
        echo "DOWN_LIST=$(cat down_list.log)" >>$GITHUB_ENV
      
    - name: Push Notification
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        curl -sSX POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -H "Content-Type: application/x-www-form-urlencoded" --data-binary $'parse_mode=MarkdownV2&chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&disable_web_page_preview=true&text=*Wrt Update Checker：*\n\n_Date: ${{ env.COME_DATE }}_\n_Result: success 🎉_\n\n*What\'s New v${{ env.RECENT_DATE }}*${{ env.DATE_INFO }}\n\n*Artifacts*${{ env.DOWN_LIST }}\n\n_Spend Time: ${{ env.SPEND_TIME }}_'        
        rm -rf *.log release.txt $SPEND_TIME $COMMIT_INFO $ETA
